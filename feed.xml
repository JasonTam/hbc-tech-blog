<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.5.2">Jekyll</generator><link href="https://saksdirect.github.io/hbc-tech-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://saksdirect.github.io/hbc-tech-blog/" rel="alternate" type="text/html" /><updated>2018-01-21T21:22:37-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/</id><title>HBC Tech</title><subtitle>We power the website and mobile experiences for Saks,  Saks Off Fifth, Gilt, Lord &amp; Taylor and The Bay.
</subtitle><entry><title>Sundial AWS EMR Integration</title><link href="https://saksdirect.github.io/hbc-tech-blog/2018-01-16-sundial-aws-emr-integration.html" rel="alternate" type="text/html" title="Sundial AWS EMR Integration" /><published>2018-01-16T00:00:00-05:00</published><updated>2018-01-16T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/sundial-aws-emr-integration</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2018-01-16-sundial-aws-emr-integration.html">&lt;h1 id=&quot;aws-elastic-map-reduce-on-sundial&quot;&gt;AWS Elastic Map Reduce on Sundial&lt;/h1&gt;

&lt;p&gt;Today I want to talk about a recent improvement we implemented in &lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;, an Open Source product launched by Gilt in early 2016. With &lt;a href=&quot;https://github.com/gilt/sundial/releases/tag/v2.0.0&quot;&gt;Sundial 2.0.0&lt;/a&gt; it’s now possible to schedule AWS Elastic Map Reduce jobs.&lt;/p&gt;

&lt;p&gt;For those of you who are not familiar with it, &lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt; is a batch job scheduler, developed by the Gilt Personalization Team, that works with Amazon ECS and Amazon Batch.&lt;/p&gt;

&lt;p&gt;Before jumping into the nitty gritty details, it’s worth taking a deeper dive into the current batch job processing setup in Gilt and the challenges we have recently started to face.&lt;/p&gt;

&lt;p&gt;We will quickly cover the following areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the current batch jobs setup&lt;/li&gt;
  &lt;li&gt;batch job scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;batch-processing-today&quot;&gt;Batch processing today&lt;/h2&gt;

&lt;p&gt;Every night, the Gilt Aster data warehouse (DW) is locked down in order to update it with the latest data coming from the relevant area of the business. During this lock, Extract-Transform-Load (&lt;a href=&quot;https://www.webopedia.com/TERM/E/ETL.html&quot;&gt;ETL&lt;/a&gt;) suites, or &lt;a href=&quot;https://www.ironsidegroup.com/2015/03/01/_ETL_-vs-elt-whats-the-big-difference/&quot;&gt;ELT as we prefer to call it&lt;/a&gt;, are
run. 
When all the jobs complete, the DW gets unlocked and the normal access to Aster is resumed. There are a number of client systems relying on the DW, most relevant are BI tools, i.e &lt;a href=&quot;https://looker.com/&quot;&gt;Looker&lt;/a&gt;, and Sundial.
Sundial in particular is used in personalization for scheduling additional jobs and to build Machine Learning models. Since there is no synchronization between Aster and Sundial, occasionally when Aster takes longer to complete, Sundial jobs would fail because of the DW being still locked down or data being stale.&lt;/p&gt;

&lt;h2 id=&quot;performance-degradation&quot;&gt;Performance degradation&lt;/h2&gt;

&lt;p&gt;Because Aster is a shared resource, and the number of jobs relying on it is increasing day by day, in the past few weeks we’ve experienced significant performance degradation.
This issue is particularly amplified at a specific time of the week, when BI reports are generated. The result is that batch jobs and reports are taking longer and longer to complete. 
This of course affects developers experience and productivity.&lt;/p&gt;

&lt;h2 id=&quot;emr-adoption&quot;&gt;EMR adoption&lt;/h2&gt;

&lt;p&gt;Because of all the nuisances above, there is additional operational time spent to restart failed jobs. Furthermore, when developing a new model, 
most of the time is spent extracting and massaging data, rather than focusing on the actual job logic.&lt;/p&gt;

&lt;p&gt;It’s easy to understand that Aster wasn’t a good candidate anymore for us and that we needed to migrate to a better and more &lt;a href=&quot;https://en.wikipedia.org/wiki/Elasticity_(cloud_computing)&quot;&gt;elastic&lt;/a&gt; platform.&lt;/p&gt;

&lt;p&gt;The solution we were looking for should:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;work with multiple data formats&lt;/li&gt;
  &lt;li&gt;be scalable&lt;/li&gt;
  &lt;li&gt;be owned by the team&lt;/li&gt;
  &lt;li&gt;be easy to integrate with our scheduling solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We didn’t have to look far to find a great candidate to solve our problems: Spark running on &lt;a href=&quot;https://aws.amazon.com/emr/&quot;&gt;AWS EMR (Elastic Map Reduce)&lt;/a&gt;. Amazon EMR provides a managed Hadoop framework that makes it easy, fast, and cost-effective to process vast amounts of data across dynamically scalable Amazon EC2 instances. 
You can also run other popular distributed frameworks such as Apache Spark, HBase, Presto, and Flink in Amazon EMR, and interact with data in other AWS data stores such as Amazon S3 and Amazon DynamoDB.&lt;/p&gt;

&lt;p&gt;A complete list of open source applications (or components) running on AWS ERM can be found &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;AWS EMR also offers a nice SDK to spin a new dynamic EMR cluster, run a job and tear down resources &lt;em&gt;on the fly&lt;/em&gt; and a cost per second billing system so to make the whole platform very cost efficient.&lt;/p&gt;

&lt;p&gt;The last two perks of using AWS EMR are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ec2/spot/&quot;&gt;AWS Spot Instances&lt;/a&gt;: running hardware at a discounted price&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-supported-instance-types.html&quot;&gt;Large variety of hardware&lt;/a&gt;: most of ELT jobs run on commodity hardware, some ML require intensive GPU computation and EMR offers hardware solutions for all of our use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-sundial-emr-integration&quot;&gt;The Sundial EMR Integration&lt;/h2&gt;

&lt;p&gt;Since we were already using Sundial for most of our ETL and ML heavy lifting, we decided to extend the Sundial &lt;code class=&quot;highlighter-rouge&quot;&gt;task_definition&lt;/code&gt; and add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;executable&lt;/code&gt;: the &lt;code class=&quot;highlighter-rouge&quot;&gt;emr_command&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Features we’ve implemented are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;running a Spark EMR job on a pre-existing cluster&lt;/li&gt;
  &lt;li&gt;running a Spark EMR job on a new created-on-the-fly cluster (and automatic tear down of resources)&lt;/li&gt;
  &lt;li&gt;choose between &lt;code class=&quot;highlighter-rouge&quot;&gt;on_demand&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;spot&lt;/code&gt; instances&lt;/li&gt;
  &lt;li&gt;live logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next two paragraphs I will go through two Sundial EMR task definition examples: the first is a Spark EMR job running on a pre-existing cluster, the second is the same job but running on a dynamically created cluster instead.&lt;/p&gt;

&lt;h3 id=&quot;running-a-job-on-a-pre-existing-emr-cluster&quot;&gt;Running a job on a pre-existing EMR Cluster&lt;/h3&gt;

&lt;p&gt;Launching an EMR job on a pre-existing cluster is really simple, all that you need are some job details and the &lt;code class=&quot;highlighter-rouge&quot;&gt;cluster_id&lt;/code&gt; where you want the job to run.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;executable&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;emr_command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;emr_cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;existing_emr_cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cluster_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;j-123ABC456DEF9&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;job_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MyJobName1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-east-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;com.company.job.spark.core.MainClass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;s3_jar_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3://my-spark-job-release-bucket/my-job-spark-v1-0-0.jar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;spark_conf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark.driver.extraJavaOptions=-Denvironment=production&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arg1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arg2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;s3_log_details&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;log_group_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark-emr-log-group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;log_stream_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark-emr-log-stream&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The other properties are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;class&lt;/em&gt;: the fully qualified main class of the job, e.g. “com.company.job.spark.core.MainClass”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;s3_jar_path&lt;/em&gt;: the s3 path to the job jar file e.g “s3://my-spark-job-release-bucket/my-job-spark-v1-0-0.jar”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;spark_conf&lt;/em&gt;: this is a &lt;strong&gt;list&lt;/strong&gt; of attributes that you can pass to the spark driver, like memory or Java Opts (as per above example)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;args&lt;/em&gt;: another list of params that will be passed to the &lt;strong&gt;MainClass&lt;/strong&gt; as arguments (as per above example)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;s3_log_details&lt;/em&gt;: Cloudwatch Log Group and Stream names for your job. See &lt;a href=&quot;#emr-logs&quot;&gt;EMR Logs paragraph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;emr-logs&quot;&gt;EMR Logs&lt;/h4&gt;

&lt;p&gt;One nice feature of Sundial is the possibility of viewing jobs’ live logs. While AWS Elastic Container Service (ECS) and Batch natively offer 
a way to access live logs, EMR updates logs only every five minutes on S3 and it cannot be used as feed for live logs. Since there isn’t a straightforward way of fixing this, it is developer’s 
responsibility to implement the code that streams job’s log to &lt;a href=&quot;https://aws.amazon.com/cloudwatch/&quot;&gt;AWS Cloudwatch Logs&lt;/a&gt;. One way of achieving this is via the &lt;a href=&quot;https://github.com/speedwing/log4j-cloudwatch-appender&quot;&gt;log4j-cloudwatch-appender&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The downside of having jobs running on &lt;em&gt;static&lt;/em&gt; AWS EMR clusters is that you will be paying for it even if no jobs are running. For this reason it would be ideal if we could spin up an EMR cluster &lt;em&gt;on-the-fly&lt;/em&gt;, run a Spark job and then dispose all the resources.&lt;/p&gt;

&lt;p&gt;If you want to know more, well, keep reading!&lt;/p&gt;

&lt;h3 id=&quot;running-a-job-on-a-dynamic-emr-cluster&quot;&gt;Running a job on a dynamic EMR Cluster&lt;/h3&gt;

&lt;p&gt;The Sundial Task definition that uses a dynamic cluster is fairly more complex and gives you some fine grained control when provisioning your cluster. 
At the same time though, if your jobs don’t require very specific configurations (e.g. permissions, aws market type), sensible default options have been provided so to simplify the 
Task Definition where possible.&lt;/p&gt;

&lt;p&gt;Let’s dig into the different sections of the json template.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_cluster&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;new_emr_cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My Cluster Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;release_label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr-5.11.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;applications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Spark&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;s3_log_uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3://cluster-log-bucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;master_instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;emr_instance_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m4.large&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instance_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aws_market&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;core_instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;emr_instance_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m4.xlarge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instance_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aws_market&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;emr_service_role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;default_emr_service_role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EMR_DefaultRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;emr_job_flow_role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;default_emr_job_flow_role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EMR_EC2_DefaultRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ec2_subnet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;subnet-a123456b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;visible_to_all_users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The json object name for a &lt;em&gt;dynamic emr cluster&lt;/em&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;new_emr_cluster&lt;/code&gt;. It is composed by the following attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;name&lt;/em&gt;: The name that will appear on the AWS EMR console&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;release_label&lt;/em&gt;: The EMR version of the cluster to create. Each EMR version maps to specific version of the applications that can run in the EMR cluster. Additional details are available on the &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html&quot;&gt;AWS EMR components page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;applications&lt;/em&gt;: The list of applications to launch on the cluster. For a comprehensive list of available applications, visit the &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html&quot;&gt;AWS EMR components page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;s3_log_uri&lt;/em&gt;: The s3 bucket where the EMR cluster put their log files. These are both cluster logs as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt; of the EMR job&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;master_instance&lt;/em&gt;: The master node hardware details (see below for more details.)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;core_instance&lt;/em&gt;: The core node hardware details (see below for more details.)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;task_instance&lt;/em&gt;: The task node hardware details (see below for more details.)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;emr_service_role&lt;/em&gt;: The IAM role that Amazon EMR assumes to access AWS resources on your behalf. For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-iam-roles.html&quot;&gt;Configure IAM Roles for Amazon EMR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;emr_job_flow_role&lt;/em&gt;: (Also called instance profile and EC2 role.) Accepts an instance profile that’s associated with the role that you want to use. All EC2 instances in the cluster assume this role. For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-what-is-emr.html&quot;&gt;Create and Use IAM Roles for Amazon EMR&lt;/a&gt; in the Amazon EMR Management Guide&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ec2_subnet&lt;/em&gt;: The subnet where to spin the EMR cluster. (Optional if the account has only the standard VPC)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;visible_to_all_users&lt;/em&gt;: Indicates whether the instances in the cluster are visible to all IAM users in the AWS account. If you specify true, all IAM users can view and (if they have permissions) manage the instances. If you specify false, only the IAM user that created the cluster can view and manage it&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;master-core-and-task-instances&quot;&gt;Master, core and task instances&lt;/h4&gt;

&lt;p&gt;An EMR cluster is composed by exactly one master instance, at least one core instance and any number of tasks instances.&lt;/p&gt;

&lt;p&gt;A detailed explanation of the different instance types is available in the &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-instances.html&quot;&gt;AWS EMR plan instances page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For simplicity I’ll paste a snippet of the AWS official documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;master node: The master node manages the cluster and typically runs master components of distributed applications. For example, the master node runs the YARN ResourceManager service to manage resources for applications, as well as the HDFS NameNode service. It also tracks the status of jobs submitted to the cluster and monitors the health of the instance groups. Because there is only one master node, the instance group or instance fleet consists of a single EC2 instance.&lt;/li&gt;
    &lt;li&gt;core node: Core nodes are managed by the master node. Core nodes run the Data Node daemon to coordinate data storage as part of the Hadoop Distributed File System (HDFS). They also run the Task Tracker daemon and perform other parallel computation tasks on data that installed applications require.&lt;/li&gt;
    &lt;li&gt;task node: Task nodes are optional. You can use them to add power to perform parallel computation tasks on data, such as Hadoop MapReduce tasks and Spark executors. Task nodes don’t run the Data Node daemon, nor do they store data in HDFS.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The json below describes configuration details of an EMR master instance:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master_instance&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;emr_instance_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m4.large&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instance_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aws_market&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note that there can only be exactly one master node, if a different values is specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;instance_count&lt;/code&gt;, it is ignored. For other instance group types the 
value &lt;code class=&quot;highlighter-rouge&quot;&gt;instance_count&lt;/code&gt; represents, as the name says, the number of EC2 instances to launch for that instance type.&lt;/p&gt;

&lt;p&gt;Other attributes are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;emr_instance_type&lt;/em&gt;: the EC2 instance type to use when launching the EMR instance&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;aws_market&lt;/em&gt;: the marketplace to provision instances for this group. It can be either &lt;code class=&quot;highlighter-rouge&quot;&gt;on_demand&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;spot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of a EMR instance using spot is:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws_market&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;spot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bid_price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.07&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;bid_price&lt;/code&gt; is the Spot bid price in dollars.&lt;/p&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Because of some AWS EMR implementation details, Sundial has two major limitations when it comes to EMR job scheduling.&lt;/p&gt;

&lt;p&gt;The first limitation is that Sundial is not able to stop EMR jobs running on pre-existing clusters. Since jobs on the EMR cluster are scheduled via &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt; and since 
AWS did not build any api on top of it, once a job is scheduled on an existing EMR cluster, in order to kill it, it would be required to ssh on the EC2 instance where the master node is running, query &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt; so to find out the
correct application id and issue a yarn kill command. We decided to not implement this feature because it would have greatly over complicated the job definition.
Jobs running on dynamic cluster are affected by the same issue. We’ve managed to still implement this feature by simply killing the whole EMR cluster.&lt;/p&gt;

&lt;p&gt;The second limitation is about live logs. As previously mentioned live logs are not implemented out of the box. Developers require to stream logs to Cloudwatch Logs and set log group and log name in the task definition.&lt;/p&gt;</content><author><name>Giovanni Gargiulo</name></author><category term="aws" /><category term="data" /><category term="sundial" /><category term="etl" /><category term="scheduling" /><category term="machine learning" /><summary>AWS Elastic Map Reduce on Sundial</summary></entry><entry><title>Revitalize Gilt City’s Order Processing with Serverless Architecture</title><link href="https://saksdirect.github.io/hbc-tech-blog/2018-01-03-instant-voucher-serverless.html" rel="alternate" type="text/html" title="Revitalize Gilt City's Order Processing with Serverless Architecture" /><published>2018-01-03T00:00:00-05:00</published><updated>2018-01-03T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/instant-voucher-serverless</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2018-01-03-instant-voucher-serverless.html">&lt;h1 id=&quot;instant-vouchers-initiative&quot;&gt;Instant Vouchers Initiative&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gilt.com/city/&quot;&gt;Gilt City&lt;/a&gt; is Gilt’s high-end voucher portal that offers localised discounts on exclusive lifestyle experiences in dining, entertainment, beauty, fitness etc to our 3.4 million members across 13 U.S. cities. Gilt City’s legacy order processing backend is a scheduled-job based architecture in which functionality such as fraud scan, payment authorisation, order fulfillment are assigned to independent jobs that process orders in batches according to order status. Though this architecture can scale to meet peak time workload and provides some level of resilience (failed orders are retried the next time the job runs), it inevitably includes some idle time i.e. wait for the next job to pick up an order from the previous job. The resulting average processing time could add up to 15 minutes.&lt;/p&gt;

&lt;p&gt;Since many of Gilt City’s offers are of an impulsive nature and time-sensitive, long processing time becomes a clear bottleneck to user experience. Team Marconi in Gilt have been driving the work on the Instant Vouchers Initiative for the past few months ago, in an effort to re-architect the backend of order processing using the latest cloud technologies. We believe that by reducing this wait time, it will significantly boost overall shopping experience and enable immediate use of vouchers and, in turn, it allows for new features such as location-based push notifications.&lt;/p&gt;

&lt;h1 id=&quot;an-event-driven-serverless-architecture&quot;&gt;An Event Driven, Serverless Architecture&lt;/h1&gt;

&lt;p&gt;It is never easy to rewrite (or replace) a mission critical system. In our case, we have to keep the existing monolithic Ruby on Rails app running while spinning up a new pipeline. We took the strangler pattern (see this &lt;a href=&quot;https://martinfowler.com/bliki/StranglerApplication.html&quot;&gt;Martin Fowler article&lt;/a&gt; for an explanation) and built a new API layer for processing individual orders around the existing batch-processing, job-based system in the same Rails app. With this approach, the legacy job-based system gradually receives less traffic and becomes a fallback safety net to catch and retry failed orders from the instant processing pipeline.&lt;/p&gt;

&lt;p&gt;The new instant order pipeline starts with the &lt;strong&gt;checkout system&lt;/strong&gt; publishing a notification to an SNS topic whenever it creates an order object. An order notification contains the order ID to allow event subscribers to look up the order object in the order key-value store. An AWS Lambda application &lt;strong&gt;order-notification-dispatcher&lt;/strong&gt; subscribes to this SNS topic and kicks off the processing by invoking an AWS Step Functions resource. See below a simplified architecture diagram of the order processing system.&lt;/p&gt;

&lt;p&gt;The architecture leverages Lambda and Step Functions from the AWS Serverless suite to build several key components. At HBC, different teams have started embracing a serverless paradigm to build production applications. There are many benefits of adopting a serverless paradigm, such as abstraction from infrastructure, out-of-the-box scalability, and an on-demand cost model just to name a few. Compared to the alternative of building and maintaining an array of EC2/container instances, a serverless architecture goes a step beyond microservices to allow an even faster development iteration cycle. With the use of Step Functions as an orchestration engine, it is much easier to facilitate interaction between Lambda applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2FYlarr.png&quot; alt=&quot;alt text&quot; title=&quot;Instant Order Processing Architecture&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;aws-step-functions-for-lambda-orchestration&quot;&gt;AWS Step Functions for Lambda Orchestration&lt;/h1&gt;

&lt;p&gt;As mentioned above, AWS Step Functions is an orchestration service that makes it easy to coordinate stateless Lambda applications by establishing a specification to transition application states. Behind the scenes, it is depicted as a state machine constructed with the JSON-based &lt;a href=&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html&quot;&gt;Amazon States Language&lt;/a&gt;. See below a sample execution from the order-processing step function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RWakgNC.png&quot; alt=&quot;alt text&quot; title=&quot;An successful Step Function execution example&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;inside-step-functions&quot;&gt;Inside Step Functions&lt;/h3&gt;

&lt;p&gt;At the top level the specification includes various types of &lt;a href=&quot;https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-states.html&quot;&gt;States&lt;/a&gt;, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Choice&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Wait&lt;/code&gt;, to be used to compose simple business logic to transition application state. Inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; State, an AWS Lambda ARN can be specified to be invoked. The output of the Lambda will be directed as input to next State. This is an excerpt from the order-processing state machine:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Comment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Order processing state machine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;StartAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ChangeOrderStatus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;States&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ChangeOrderStatus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:1234567890:function:start-order-processing:2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudScan&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;FraudScan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:1234567890:function:fraud-scan:2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IsFraudOrder&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;IsFraudOrder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Choices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.fraud_verdict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cleared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AuthorizePayment&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.fraud_verdict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fraud&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudOrderTerminal&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;AuthorizePayment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:1234567890:function:authorize-payments:2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WarehouseChoice&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;FraudOrderTerminal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This is the ending state for a fraud order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;End&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;polling-and-retry-on-errors&quot;&gt;Polling and Retry on Errors&lt;/h3&gt;

&lt;p&gt;A serverless paradigm fits really well in situations where computation completes within a short time (ideally seconds). However, sometimes we still need to run a task that will take slightly longer. For example, in our pipeline, we need to keep polling a service endpoint for a fraud-scan result, since it is an async process. We implemented this by defining a retry counter &lt;code class=&quot;highlighter-rouge&quot;&gt;get_fraud_status_retries&lt;/code&gt; within a &lt;code class=&quot;highlighter-rouge&quot;&gt;Choice&lt;/code&gt; state and set a max attempt count of 60 to terminate retries.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IsFraudOrder&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Choices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.fraud_verdict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cleared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AuthorizePayment&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.fraud_verdict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fraud&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudOrderTerminal&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.get_fraud_status_retries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;NumericLessThanEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudScanWait&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.get_fraud_status_retries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;NumericGreaterThan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudStatusUnavailableTerminal&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is also critical to make cloud applications resilient to errors such as network timeouts. Step Functions provides error handling to allow catching/retrying of some predefined errors as well as customised Lambda error types. You can specify different retry strategies with properties such as &lt;code class=&quot;highlighter-rouge&quot;&gt;MaxAttempts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BackoffRate&lt;/code&gt;. See the below example where we implemented a retry mechanism for different errors in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; state to create redemption codes:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CreateRedemptionCode&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:1234567890:function:create-redemption-code:3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FulfillElectronicOrder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Retry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ErrorEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GatewayTimeoutError&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;IntervalSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;MaxAttempts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Catch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ErrorEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;States.ALL&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CatchMissingRedemptionCode&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;immutable-deployment--partial-rollout&quot;&gt;Immutable Deployment &amp;amp; Partial Rollout&lt;/h1&gt;

&lt;p&gt;Deploying a mission critical service to a production environment is always a nervous process. At HBC we advocate immutable deployments whenever possible and leverage A/B testing to help us roll out new features to customers in a gradual manner. In a serverless world, it is a little different, since most of the infrastructure management is abstracted away.&lt;/p&gt;

&lt;h3 id=&quot;lambda-versioning&quot;&gt;Lambda Versioning&lt;/h3&gt;
&lt;p&gt;AWS Lambda’s &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html&quot;&gt;versioning feature&lt;/a&gt; provides the ability to make Lambda functions immutable by taking a snapshot of the function (aka publishing a version). We really like this, since it ensures the Lambda function artifact as well as environment variables remain immutable once published. Note that in the above code snippets of state machine JSON, the ARN specified for each Lambda resource is Lambda version ARN instead of function ARN. We also use Lambda’s &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html&quot;&gt;aliasing feature&lt;/a&gt; to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;prod&lt;/code&gt; alias mapped to the current production version, with immutable environment variables:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Rj7UeTy.png&quot; alt=&quot;alt text&quot; title=&quot;Lambda Alias Mapping&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With aliasing we can easily roll back to a previous Lambda version in case of an unexpected production failure.&lt;/p&gt;

&lt;h3 id=&quot;bluegreen-stacks&quot;&gt;Blue/Green Stacks&lt;/h3&gt;

&lt;p&gt;So we have immutable Lambda functions, but we still want to make our Step Functions (SF) immutable. We decided to create a new SF resource every time we release it, meanwhile the old SF resource remains unchanged. Since AWS does not currently provide a versioning feature for Step Functions, we included semantic versioning in the SF name e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;order-processing-v0.0.6&lt;/code&gt;. With both new and old versions (including historical SFs) we are able to apply a blue/green deployment and rollback procedure.&lt;/p&gt;

&lt;p&gt;To route orders to either blue/green stack, we make the &lt;strong&gt;order-notification-dispatcher&lt;/strong&gt; Lambda the de facto router by providing blue/green versions of SF as its &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/env_variables.html&quot;&gt;environment variables&lt;/a&gt;. Here is the Node.js code to read the stack environment variables:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachineBlueVer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STATE_MACHINE_BLUE_VER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachineGreenVer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STATE_MACHINE_GREEN_VER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With fetched state machine stack version we can compose Step Function ARN with predefined format, then start a new execution with AWS sdk Step Function api:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachineVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Read from environment vars&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preProcessingStepFunctionPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachineVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stateMachineArn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StepFunctions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startExecution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;partial-rollout&quot;&gt;Partial Rollout&lt;/h3&gt;

&lt;p&gt;We make the &lt;strong&gt;order-notification-dispatcher&lt;/strong&gt; query our a/b test engine to have simple routing logic for each order notification, so that it can shift traffic to either the blue/green Step Function stack according to test/control group the order falls into. Also note that AWS recently released a nice &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html&quot;&gt;traffic shifting&lt;/a&gt; feature for Lambda applications. However, we didn’t use it as our a/b test engine provides finer-grain control which allows us to target certain groups such as HBC’s internal employees. Here is a diagram depicting the partial rollout process for new Step Function resources:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZSyvoJ1.png&quot; alt=&quot;alt text&quot; title=&quot;Partial Rollout Process&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;h3 id=&quot;what-we-have-achieved&quot;&gt;What We Have Achieved&lt;/h3&gt;

&lt;p&gt;As of today all of Gilt City’s orders have been directed to the instant processing pipeline, which shortens the majority of orders’ processing time from over 15 minutes to a few seconds. We are looking to expand the system to take over more workload including physical products to bring the instant order user experience to a wider customer base.&lt;/p&gt;

&lt;h3 id=&quot;step-functions-limitations&quot;&gt;Step Functions Limitations&lt;/h3&gt;

&lt;p&gt;From our development exerience using AWS Step Functions we discovered some limitations of this service. First of all, it lacks of a feature like a &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; state which would take a list of input objects and transform it to another list of result objects. A possible solution could be allowing invocation of a sub SF multiple times. In our case, an order object can be split into multiple order objects depending on the items in the original order. Unfortuntely SF does not offer a State type that can map a dynamic number of elements. We eventually made the workaround by creating an &lt;strong&gt;order-pre-processing&lt;/strong&gt; SF and make it invoke the &lt;strong&gt;order-processing&lt;/strong&gt; SF multiple times to process those ‘split’ orders.&lt;/p&gt;

&lt;p&gt;Secondly, we hope AWS can provide versioning/aliasing for Step Functions so we can gain immutability out of the box instead of forcing immutability on our side. Any support for blue/green deployment would be even better.&lt;/p&gt;

&lt;p&gt;Also, we expect AWS to provide better filtering/searching abilities on the Step Functions dashboard so we can gain some fundamental data analytics from historical executions. This could be obtained by declaring some “searchable” fields and relative types in the SF definition.&lt;/p&gt;

&lt;p&gt;In the context of AWS Enterprise Support, we (Team Marconi) had a productive meeting directly with the AWS Step Functions Product Manager during which we have suggested our list of improvements. It was gratifying to hear that most of these are already or will be included in their development roadmap.&lt;/p&gt;

&lt;h3 id=&quot;future-work&quot;&gt;Future Work&lt;/h3&gt;
&lt;p&gt;From an architecture perspective, we are trying to standardize a continous delivery process for our serverless components. At the moment, what we have is “poor man’s CI/CD” - some bash/node scripts which use AWS CloudFormation SDK to provision resources. There are various tools available either from AWS or the serverless community such as &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/documentation/codepipeline/&quot;&gt;CodePipeline&lt;/a&gt; that we are trying to integrate with to provide a frictionless path to production.&lt;/p&gt;</content><author><name>Liyu Ma</name></author><category term="aws" /><category term="serverless" /><category term="lambda" /><category term="step function" /><category term="gilt city" /><category term="order processing" /><summary>Instant Vouchers Initiative</summary></entry><entry><title>Presentations we love: 2017</title><link href="https://saksdirect.github.io/hbc-tech-blog/2017-12-30-presentations-we-love.html" rel="alternate" type="text/html" title="Presentations we love: 2017" /><published>2017-12-30T00:00:00-05:00</published><updated>2017-12-30T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/presentations-we-love</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2017-12-30-presentations-we-love.html">&lt;p&gt;2017 was a year of growth and learning at HBC Tech. Our organization embraced new technologies and new ways of building application software.&lt;/p&gt;

&lt;p&gt;As the year comes to an end, let’s recognize some notable technical presentations from 2017.&lt;/p&gt;

&lt;h2 id=&quot;kubernetes-project-update&quot;&gt;Kubernetes Project update&lt;/h2&gt;
&lt;p&gt;Kelsey Hightower (&lt;a href=&quot;https://twitter.com/kelseyhightower&quot;&gt;@kelseyhightower&lt;/a&gt;) at KubeCon 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=07jq-5VbBVQ&quot; title=&quot;Kubernetes Project update&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/07jq-5VbBVQ/0.jpg&quot; alt=&quot;Kelsey Hightower video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;production-designing-for-testability&quot;&gt;Production: Designing for testability&lt;/h2&gt;
&lt;p&gt;Mike Bryzek (&lt;a href=&quot;https://twitter.com/mbryzek&quot;&gt;@mbryzek&lt;/a&gt;) at QCon New York 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=z-ATZTUgaAo&quot; title=&quot;Production: Designing for testability&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/z-ATZTUgaAo/0.jpg&quot; alt=&quot;Mike Bryzek video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;streaming-microservices-contracts--compatibility&quot;&gt;Streaming Microservices: Contracts &amp;amp; Compatibility&lt;/h2&gt;
&lt;p&gt;Gwen Shapira (&lt;a href=&quot;https://twitter.com/gwenshap&quot;&gt;@gwenshap&lt;/a&gt;) at QCon New York 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/presentations/contracts-streaming-microservices&quot;&gt;&lt;img src=&quot;/assets/images/presentations-we-love-2017/gwen-shapira-contracts-and-compatibility-480.png&quot; alt=&quot;contracts-streaming-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;spinnaker-and-the-culture-behind-the-tech&quot;&gt;Spinnaker and the Culture Behind the Tech&lt;/h2&gt;
&lt;p&gt;Dianne Marsh (&lt;a href=&quot;https://twitter.com/dmarsh&quot;&gt;@dmarsh&lt;/a&gt;) at KubeCon 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=mfFtfaulCtg&quot; title=&quot;Spinnaker and the culture behind the tech&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/mfFtfaulCtg/0.jpg&quot; alt=&quot;Dianne Marsh video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;embracing-change-without-breaking-the-world&quot;&gt;Embracing Change without breaking the world&lt;/h2&gt;
&lt;p&gt;Jim Flanagan and Kyle Thomson at AWS re:invent 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=kJq81Y7OEx4&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/kJq81Y7OEx4/0.jpg&quot; alt=&quot;AWS Embracing Change&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;developing-applications-on-aws-in-the-jvm&quot;&gt;Developing Applications on AWS in the JVM&lt;/h2&gt;
&lt;p&gt;Kyle Thomson (&lt;a href=&quot;https://github.com/kiiadi&quot;&gt;@kiiadi&lt;/a&gt;) at AWS re:invent 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=byRois3s5Yc&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/byRois3s5Yc/0.jpg&quot; alt=&quot;AWS JVM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;chaos-engineering-at-netflix&quot;&gt;Chaos Engineering at Netflix&lt;/h2&gt;
&lt;p&gt;Nora Jones (&lt;a href=&quot;https://twitter.com/nora_js&quot;&gt;@nora_js&lt;/a&gt;) at AWS re:invent 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=LaKGx0dAUlo&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/LaKGx0dAUlo/0.jpg&quot; alt=&quot;Chaos Engineering at Netflix&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;apibuilder&quot;&gt;apibuilder&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) at Scala Up North 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/api-builder-scala-up-north-2017&quot;&gt;&lt;img src=&quot;/assets/images/presentations-we-love-2017/sean-sullivan-apibuilder-july-2017-480.png&quot; alt=&quot;apibuilder-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;managing-data-in-microservices&quot;&gt;Managing Data in Microservices&lt;/h2&gt;
&lt;p&gt;Randy Shoup (&lt;a href=&quot;https://twitter.com/randyshoup&quot;&gt;@randyshoup&lt;/a&gt;) at QCon New York 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=E8-e-3fRHBw&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/E8-e-3fRHBw/0.jpg&quot; alt=&quot;Randy Shoup - Managing Data&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;crushing-tech-debt-through-automation-at-coinbase&quot;&gt;Crushing Tech Debt Through Automation at Coinbase&lt;/h2&gt;
&lt;p&gt;Rob Witoff  (&lt;a href=&quot;https://twitter.com/rwitoff&quot;&gt;@rwitoff&lt;/a&gt;) at QCon London 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=KaK2lAj1B-Q&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/KaK2lAj1B-Q/0.jpg&quot; alt=&quot;Rob Witoff - Tech Debt&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;gilts-ios-codebase-evolution&quot;&gt;Gilt’s iOS codebase evolution&lt;/h2&gt;
&lt;p&gt;Evan Maloney (&lt;a href=&quot;https://twitter.com/_emaloney_&quot;&gt;@_emaloney_&lt;/a&gt;) at the Brooklyn Swift Developers Meetup&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/217236459&quot;&gt;&lt;img src=&quot;/assets/images/presentations-we-love-2017/evan-maloney-ios-swift-gilt-2017-480.png&quot; alt=&quot;evan-maloney-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;apache-struts-and-the-equifax-data-breach&quot;&gt;Apache Struts and the Equifax Data Breach&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) at the Portland Java User Group&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/apache-struts-and-the-equifax-data-breach&quot;&gt;&lt;img src=&quot;/assets/images/presentations-we-love-2017/sean-sullivan-struts-and-equifax-october-2017-480.png&quot; alt=&quot;struts-equifax-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;promcon-2017&quot;&gt;Promcon 2017&lt;/h2&gt;
&lt;p&gt;Giovanni Gargiulo (&lt;a href=&quot;https://twitter.com/giannigar&quot;&gt;@giannigar&lt;/a&gt;) at Promcon 2017 (Munich)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=btnXuFLcpS8&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/btnXuFLcpS8/0.jpg&quot; alt=&quot;giovanni-gargiulo-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>HBC Tech</name></author><category term="community" /><category term="conferences" /><category term="qcon" /><category term="aws" /><category term="cloud" /><category term="2017" /><summary>2017 was a year of growth and learning at HBC Tech. Our organization embraced new technologies and new ways of building application software.</summary></entry><entry><title>Rethinking Retail: 4 Opportunities to Upgrade the Associate Experience</title><link href="https://saksdirect.github.io/hbc-tech-blog/2017-11-24-rethinking-retail-4-oportunities.html" rel="alternate" type="text/html" title="Rethinking Retail: 4 Opportunities to Upgrade the Associate Experience" /><published>2017-11-24T00:00:00-05:00</published><updated>2017-11-24T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/rethinking-retail-4-oportunities</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2017-11-24-rethinking-retail-4-oportunities.html">&lt;p&gt;At HBC Tech, one of the company’s current initiatives is to bridge the divide between the physical and digital experience. Saks Fifth Avenue has a considerable network of retail locations throughout the US, and our goal is to use technology to entice more people into these stores. More specifically, one initiative focuses on connecting new and existing Saks customers with our style professionals on the retail floor.&lt;/p&gt;

&lt;p&gt;How does the design team go about tackling this challenge? The first thing we do is map out the full customer journey from beginning to end — device-agnostic, channel-agnostic. We create a view of the distinct elements that make up the customer journey, in order to devise an approach to provide a better experience for each touchpoint. Research helps to inform the customer journey, and for this initiative we’ve conducted many customer and associate interviews in order to get to the heart of their challenges and how we can help.&lt;/p&gt;

&lt;p&gt;We have two types of customers to design for in this case — the associate who works in the retail store and provides styling advice to the customer, and the Saks customer themselves. There are a few points in the journey where these two users intersect.
Customers may have an event coming up that they need to dress for, or they might be looking for that impossible-to-find Fendi backpack. They might deep down really want a new fashionable friend that they can get advice from on the daily. In these moments, they will be more likely to reach out to a retail associate for help.&lt;/p&gt;

&lt;p&gt;Associates are style professionals who thoughtfully build their client book month after month and meticulously style and assist their regular clients. They want to provide the best possible service to Saks customers and drive sales. There are some common pain points that came up again and again in the interviews, and design can help to solve some of them.
These are four core opportunities to make the retail associate workflow more seamless, structured and analytical.&lt;/p&gt;

&lt;h3 id=&quot;1-one-view-of-the-customer&quot;&gt;1. One view of the customer&lt;/h3&gt;
&lt;p&gt;Visibility into the customer’s previous orders, style affinities, brands they follow, sizes and online activity will give associates the information they need to provide the best advice to customers. Most importantly, associates need to be able to access this information on their personal devices as customer requests don’t stop after business hours.&lt;/p&gt;

&lt;h3 id=&quot;2-client-acquisition&quot;&gt;2. Client acquisition&lt;/h3&gt;
&lt;p&gt;Associates need to have the ability to accept digital leads in one system — the same system that they add new clients to that they meet in the store. We want to provide as much information about the customer up front to allow them to successfully work with the customer.
We’re launching a new way for customers to onboard with a stylist in the Saks app soon, however to scale the styling service, we’re also talking about automation. Some companies are turning to chatbots to help customers narrow down their requests before connecting with a styling professional. This boosts the efficiency of customer service for companies, while also potentially leading to a more accurate match with a stylist.&lt;/p&gt;

&lt;h3 id=&quot;3-inventory&quot;&gt;3. Inventory&lt;/h3&gt;
&lt;p&gt;Visibility into online and in-store inventory is a must. It should be clear to Associates what they can pull from the store racks vs what they need to send a link to online. This visibility should extend to other store locations and beyond. What if there were even further transparency of global inventory levels of a product? This would benefit customers as they could find anything they’re looking for through Saks stores, and it would benefit associates by boosting sales.&lt;/p&gt;

&lt;h3 id=&quot;4-automation&quot;&gt;4. Automation&lt;/h3&gt;
&lt;p&gt;Store associates don’t have time to sift through inventory to provide personalized recommendations to each of their clients, or to personally get to know each new customer coming through the doors. They need insights regularly delivered to them that they can take immediate action on. For example, suggestions for follow up, new arrivals, upcoming events, or personal notes that can be searched and added to tasks. Machine learning can be implemented with product recommendations at the customer level as well as at the group level of customers with similar affinities.
Perhaps most importantly, ideally all of these activities would exist in a unified stylist tool. We should provide a seamless integration of their CRM tool and point of sale so that associates can checkout a customer and add notes to follow up efficiently without switching between systems.
After more than 30 interviews with our Saks Fifth Avenue retail associates, these opportunities to improve their experience became quite clear. Some of these challenges are beyond design, but through workshops, research, prototyping and iteration, we can assist in identifying the priorities for business, product and all other teams involved.
Associates are our customers too. They are the thread that ties together all of the services offered by Saks, and they represent the brand. We should be doing everything in our power to make their lives easier and to nurture their client relationships.&lt;/p&gt;</content><author><name>Elizabeth Pizzuti</name></author><category term="retail" /><category term="user experience" /><category term="product design" /><category term="user research" /><category term="retail technology" /><summary>At HBC Tech, one of the company’s current initiatives is to bridge the divide between the physical and digital experience. Saks Fifth Avenue has a considerable network of retail locations throughout the US, and our goal is to use technology to entice more people into these stores. More specifically, one initiative focuses on connecting new and existing Saks customers with our style professionals on the retail floor.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://saksdirect.github.io/hbc-tech-blog{&quot;feature&quot;=&gt;&quot;rethinking-retail.jpg&quot;, &quot;credit&quot;=&gt;nil, &quot;creditlink&quot;=&gt;nil}" /></entry><entry><title>Dublin Scala Spree</title><link href="https://saksdirect.github.io/hbc-tech-blog/2017-09-11-dublin-scala-spree.html" rel="alternate" type="text/html" title="Dublin Scala Spree" /><published>2017-09-11T00:00:00-05:00</published><updated>2017-09-11T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/dublin-scala-spree</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2017-09-11-dublin-scala-spree.html">&lt;p&gt;This Friday the Gilt/HBC Digital Dublin office will be hosting the first ever Dublin Scala Spree, a day-long Scala Open Source Hackathon. 
The event is organized by the Dublin Scala Usergroup in cooperation with Dublin Functional Kubs and the Scala Center at EPFL in Lausanne, Switzerland.
&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Date &amp;amp; Time:&lt;/strong&gt; Friday, 15th September, 10am - 4pm&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Location:&lt;/strong&gt; Gilt/HBC Digital Office, Shelbourne Rd., Dublin 4, Ireland&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sign-Up:&lt;/strong&gt; Please register for the event via the &lt;a href=&quot;https://www.meetup.com/Dublin-Scala-users-group/events/242952081&quot;&gt;Dublin Scala Users Group&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organizers:&lt;/strong&gt; Dublin Scala Meetup and Dublin Functional Kubs in cooperation with the Scala Center @ EPFL in Lausanne&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-a-scala-spree&quot;&gt;What is a Scala Spree?&lt;/h3&gt;
&lt;p&gt;Scala Spree is a free community event aiming to popularize Open Source Software. It brings together Open Source authors, 
maintainers and software engineers willing to contribute to OSS projects. Under the guidance of seasoned experts, newcomers learn about the inner 
working of some popular tools and Scala libraries, and contribute to make them even better. For library authors, it’s an opportunity to improve 
their tools and get fresh feedback. For attendees it is a unique opportunity to lean more about Scala, contribute to Open Source Software and 
expand their skills. And for everyone it’s a great opportunity to meet and have fun!&lt;/p&gt;

&lt;h3 id=&quot;featured-projects&quot;&gt;Featured Projects&lt;/h3&gt;
&lt;p&gt;For this week’s Spree we have the following special guests and their OSS projects:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scala-sbt.org&quot;&gt;sbt and zinc&lt;/a&gt; - Jorge Vicente Cantero &lt;a href=&quot;https://twitter.com/jvican&quot;&gt;@jvican&lt;/a&gt; (&lt;a href=&quot;https://scala.epfl.ch&quot;&gt;Scala Center&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apibuilder.io&quot;&gt;API Builder&lt;/a&gt; - Michael Bryzek &lt;a href=&quot;https://twitter.com/mbryzek&quot;&gt;@mbryzek&lt;/a&gt; (&lt;a href=&quot;https://www.flow.io&quot;&gt;Flow.io&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gilt?q=gfc&quot;&gt;Gilt Foundation Classes&lt;/a&gt; - Gregor Heine &lt;a href=&quot;https://twitter.com/greheine&quot;&gt;@greheine&lt;/a&gt; (&lt;a href=&quot;http://tech.gilt.com&quot;&gt;HBC Digital&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a Scala open source project that you would like to feature at the Spree, please get in touch with the &lt;a href=&quot;https://www.meetup.com/Dublin-Scala-users-group&quot;&gt;Dublin Scala Users Group organizers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like all Dublin Scala Community events, Scala Spree is free of charge and the only real requirement is an open mind and the will to contribute! 
– Apart from bringing your own computer to use, but chances are you figured that out already.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;duration-and-pace&quot;&gt;Duration and pace&lt;/h3&gt;
&lt;p&gt;To begin with, maintainers gather together in front of all the contributors to briefly explain their projects and tickets in one minute. 
The idea is to give a good high-level explanation to motivate participants without going into too much detail. When they are done, participants 
approach the projects they are most interested in and get it contact with the maintainers. At this point, maintainers usually listen to the 
participants’ experience and provide personal guidance on tickets that would suit them. 
Then, the fun begins! Participants start hacking on their projects and maintainers review PRs as they come, assisting participants when they ask 
for help. We encourage maintainers to merge as many PRs as possible in the place, for two reasons: 
Participants get a small token of appreciation from the Scala Center. It increases the motivation of the participants. If participants get the 
first PR merged, they are invited to continue solving issues until they are happy with their work! 
At the middle of the spree, we will provide free lunch and refreshments. 
Participants can leave the event at any time they want. When the time approaches the end, everyone starts to wrap up: participants finish their 
PRs while maintainers finish their reviews, and organizers of the spree give away swag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places will be strictly limited and will be allocated on a first come first served basis. 
Registration through the &lt;a href=&quot;https://www.meetup.com/Dublin-Scala-users-group/events/242952081&quot;&gt;Dublin Scala Users Group&lt;/a&gt; is required and only successfull RSVPs can attend.&lt;/strong&gt;&lt;/p&gt;</content><author><name>Gregor Heine</name></author><category term="open source" /><category term="hackathon" /><category term="culture" /><category term="community" /><category term="meetups" /><summary>This Friday the Gilt/HBC Digital Dublin office will be hosting the first ever Dublin Scala Spree, a day-long Scala Open Source Hackathon. 
The event is organized by the Dublin Scala Usergroup in cooperation with Dublin Functional Kubs and the Scala Center at EPFL in Lausanne, Switzerland.


  Date &amp;amp; Time: Friday, 15th September, 10am - 4pm
  Location: Gilt/HBC Digital Office, Shelbourne Rd., Dublin 4, Ireland
  Sign-Up: Please register for the event via the Dublin Scala Users Group
  Organizers: Dublin Scala Meetup and Dublin Functional Kubs in cooperation with the Scala Center @ EPFL in Lausanne</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://saksdirect.github.io/hbc-tech-blog{&quot;feature&quot;=&gt;&quot;https://pbs.twimg.com/media/DEIosBJWAAAj87h.jpg&quot;, &quot;credit&quot;=&gt;nil, &quot;creditlink&quot;=&gt;nil}" /></entry><entry><title>Team Rookie 2017</title><link href="https://saksdirect.github.io/hbc-tech-blog/2017-08-30-team-rookie.html" rel="alternate" type="text/html" title="Team Rookie 2017" /><published>2017-08-30T00:00:00-05:00</published><updated>2017-08-30T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/team-rookie</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2017-08-30-team-rookie.html">&lt;h1 id=&quot;who-we-are&quot;&gt;Who We Are&lt;/h1&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/team.png&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Team-Rookie-2017, as we pride ourselves with being the most awesome team ever, has spent the summer improving the browsing experience for Gilt users as well as to collect data for our personalization team. The end result of our project included the crafted front-end user experience and a back-end service for data processing.&lt;/p&gt;

&lt;h1 id=&quot;project-ideation&quot;&gt;Project Ideation&lt;/h1&gt;
&lt;p&gt;The final project idea rose to the top through countless meetings and discussions with various teams in the organization. With the initially decided problem-solution proven to be unexecutable, our team, along with all of our mentors, took efforts to come up with a new solution to solve the given problem with the limited resources we had. This immersive process, in the very beginning of the program, ensured the understanding of the engineering problem and established the success of our project.&lt;/p&gt;

&lt;p&gt;To arrive at the best possible solution, we spent time learning the technology stack end-to-end. We went through many tutorials and labs with our mentors on the technologies we were going to eventually use, namely Scala, Android, and the Play framework. As we gained familiarities with these tools and technologies daily, we were quickly able to finalize on our ideas and the project has finally taken off.&lt;/p&gt;

&lt;h1 id=&quot;problem-space&quot;&gt;Problem Space:&lt;/h1&gt;

&lt;p&gt;So let’s talk about the problem. With a growing user base, the Gilt platform needs to better understand what the users’ interests are in order to tailor unique shopping experiences to different user groups. Currently, users are able to “shop-the-look.” This feature allows a user to browse a completed set of apparels, such as the combination of a shirt, a pair of jeans, and shoes. It rids the hassle of a lot of users having to discover these items separately, they are able to find them all at once and make one single purchase. At the moment, these completed looks are selected by stylists who understand them. While stylists may provide the highest quality pairings, we are unable to scale human labor to the entire catalog. As fashion trends change, we need to update our pairings accordingly. Therefore, we aim to continuously collect user opinions on possible pairings. With these we can develop machine learning models to infer item compatibility. This is an ambitious goal, but not unachievable. We just need a steady supply of data.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution:&lt;/h1&gt;

&lt;p&gt;To tackle this problem, we proposed to create a fun and engaging experience for the users while they are shopping: completing their own outfits. One key requirement for this experience is that it can not interfere with the current purchase flow, meaning that if a user is closing in on a purchase, that process should not be interrupted. Therefore, rather than inserting the experience within the current workflow, we’ve decided to include the feature on the search page where users are able to favorite items they like. This is shown in the figure below.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/web-search.png&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For our experience, to minimize disruption to the current workflow, we’ve added an additional hover link on the favorite button, and this will direct the users to our experience.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/favorite.png&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We provide the users with additional items that can potentially be paired with the initial favorited item to form completed looks. These products, limited by category and price based on the favorited items, will be presented to the users for individual selections. The users can let their imaginations go wild and pick what they think are the best combinations. During this process, we will collected this data and persist it through our back-end API to the database.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/first_page.png&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally, in order to complete the experience and make it as engaging as possible, we’ve decided to allow the users to immediately purchase the selected items if they wish. Since these items are what they specifically picked out from a pool of products, they will have a greater likelihood for conversion.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/second_page.png&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;So in a nutshell, this is the completed project of the 10 week internship filled with hard work, grind, sweat (mostly from our daily trips to equinox right down stairs), and a whole lot of fun.&lt;/p&gt;

&lt;h1 id=&quot;intern-activities&quot;&gt;Intern Activities&lt;/h1&gt;

&lt;p&gt;While we were not busy being awesome engineers, team-rookie spent most of our leisure time exploring New York and staying cool. Here are some of the highlights.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/pose.JPG&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/poke.JPG&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/wonderwoman.JPG&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/dessert.png&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/helmets.JPG&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/presentation.JPG&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;mentorship&quot;&gt;Mentorship&lt;/h1&gt;

&lt;p&gt;Team Rookie would like to give out a huge shout out to all of our mentors that helped us along they way and made this project possible (you know who you are)! With a special thanks to Doochan and Mike, who led the intern committee through all of our battles and came out on the other end with a solid victory. The complete-the-look experience would not have been possible without you guys.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/doochan.JPG&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/team-rookie-2017/mike.JPG&quot; width=&quot;940&quot; /&gt;
&lt;/p&gt;</content><author><name>Team Rookie</name></author><category term="internship" /><category term="web" /><category term="team rookie" /><summary>Who We Are</summary></entry><entry><title>HBC Tech Talks: February 2017 through July 2017</title><link href="https://saksdirect.github.io/hbc-tech-blog/2017-08-10-midyear-recap.html" rel="alternate" type="text/html" title="HBC Tech Talks: February 2017 through July 2017" /><published>2017-08-10T00:00:00-05:00</published><updated>2017-08-10T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/midyear-recap</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2017-08-10-midyear-recap.html">&lt;p&gt;We’ve had a busy 2017 at HBC. The great work of our teams has created opportunities to share what we’ve learned with audiences around the world. This year our folks have been on stage in Austin, Sydney, Portland, Seattle, San Diego, Boston, London, Israel and on our home turf in NYC and Dublin. The talks have covered deep learning, design thinking, data streaming and developer experience to name just a few.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/zkRer6r.png&quot; alt=&quot;Sera Chin and Yi Cao spoke at the NYC Scrum User Group about HBC's Design Sprints&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lucky for you, if you haven’t been able to check out our talks in person, we’ve compiled the decks and videos from a bunch of our talks right here. Enjoy!&lt;/p&gt;

&lt;h3 id=&quot;february&quot;&gt;February&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sean Sullivan spoke at the Portland Java User Group about &lt;a href=&quot;https://speakerdeck.com/sullis/e-commerce-under-the-hood&quot;&gt;Gilt’s E-Commerce Platform&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Mikhail Girkin spoke at the Reactive Systems Meetup in Dublin about &lt;a href=&quot;https://www.slideshare.net/MikhailGirkin/streaming-data-to-s3-using-akka-streams&quot;&gt;Streaming Data to s3 Using Akka Streams&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;march&quot;&gt;March&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ryan Martin spoke at AWS Architecture Week in NYC.&lt;/li&gt;
  &lt;li&gt;Ugo Mantrangalo presented at the Microservices Meetup in Dublin about &lt;a href=&quot;https://umatrangolo.github.io/go-microservices-deck/&quot;&gt;Writing Microservices in Go&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Dana Pylayeva lead a workshop entitled &lt;a href=&quot;https://www.slideshare.net/danapylayeva/growing-by-sharing-workshop-at-sgcal&quot;&gt;Growing by Sharing: Transitioning a Group to a Self-Directed Model&lt;/a&gt; at the NYC Scrum User Group in March and the Scrum Gathering in San Diego in April.&lt;/li&gt;
  &lt;li&gt;Jose Martinez and Ed Perry spoke at the Elastic NYC User Group Meetup.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;april&quot;&gt;April&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Adrian Trenaman spoke at the AWS Dublin User Group about &lt;a href=&quot;https://www.slideshare.net/trenaman/serverless-hbc-digital-real-world-explorations-of-lambda-aws-meetup-april-4th-2017&quot;&gt;Serverless Architectures&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Dana Pylayeva lead a workshop on &lt;a href=&quot;https://www.slideshare.net/danapylayeva/aatc-gamifying-devops-with-lego-and-chocolate-game&quot;&gt;Gamifying DevOps with Chocolate and Legos&lt;/a&gt; at the Agile Alliance Technical Conference in Boston.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;may&quot;&gt;May&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sean Sullivan spoke at the Portland Java User Group about &lt;a href=&quot;https://speakerdeck.com/sullis/payment-processing-at-gilt-dot-com&quot;&gt;Payment Processing at Gilt&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Evan Maloney spoke at the Brooklyn Swift Meetup about &lt;a href=&quot;https://vimeo.com/217236459&quot;&gt;Gilt’s 8 Year Codebase Evolution&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;june&quot;&gt;June&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Mike Hansen spoke at QCon about &lt;a href=&quot;https://www.infoq.com/presentations/hbc-digital-streaming&quot;&gt;Streaming Architectures&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Adrian Trenaman spoke at QCon about &lt;a href=&quot;https://www.infoq.com/news/2017/07/remove-friction-dev-ex&quot;&gt;Removing Friction in the Developer Experience&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Gregor Heine spoke at the Dublin Microservices Meetup about &lt;a href=&quot;https://www.youtube.com/watch?v=Sx_0HlJPTVQ&quot;&gt;Making Microservice deployments to AWS a breeze with Nova&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Pau Carré Cardona spoke a the O’Reilly AI Conference in NYC and the Deep Learning in Retail Summit in London about &lt;a href=&quot;https://cdn.oreillystatic.com/en/assets/1/event/258/Deep%20learning%20in%20the%20fashion%20industry%20Presentation.pdf&quot;&gt;Deep Learning in the Fashion Industry&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;july&quot;&gt;July&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sean Sullivan spoke at &lt;a href=&quot;https://speakerdeck.com/sullis/api-builder-scala-up-north-2017&quot;&gt;Scala Up North&lt;/a&gt; and the &lt;a href=&quot;https://speakerdeck.com/sullis/apibuilder&quot;&gt;Portland Java User Group&lt;/a&gt; about ApiBuilder.&lt;/li&gt;
  &lt;li&gt;Sophie Huang spoke at the Customer Love Summit in Seattle.&lt;/li&gt;
  &lt;li&gt;Kyla Robinson gave a keynote on Key to Success: Creating A Mobile–First Mentality.&lt;/li&gt;
  &lt;li&gt;Sera Chin and Yi Cao spoke at the NYC Scrum User Group about HBC’s Design Sprints.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>HBC Tech</name></author><category term="meetups" /><category term="conferences" /><category term="evangelism" /><summary>We’ve had a busy 2017 at HBC. The great work of our teams has created opportunities to share what we’ve learned with audiences around the world. This year our folks have been on stage in Austin, Sydney, Portland, Seattle, San Diego, Boston, London, Israel and on our home turf in NYC and Dublin. The talks have covered deep learning, design thinking, data streaming and developer experience to name just a few.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://saksdirect.github.io/hbc-tech-blog{&quot;feature&quot;=&gt;&quot;http://i.imgur.com/zkRer6r.png&quot;, &quot;credit&quot;=&gt;nil, &quot;creditlink&quot;=&gt;nil}" /></entry><entry><title>Sundial or AWS Batch, Why not both?</title><link href="https://saksdirect.github.io/hbc-tech-blog/2017-08-04-sundial-batch.html" rel="alternate" type="text/html" title="Sundial or AWS Batch, Why not both?" /><published>2017-08-04T00:00:00-05:00</published><updated>2017-08-04T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/sundial-batch</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2017-08-04-sundial-batch.html">&lt;p&gt;About a year ago, we (the Gilt/HBC personalization team) open sourced Sundial &lt;img src=&quot;https://github.com/gilt/sundial&quot; alt=&quot;&quot; /&gt;, a batch job orchestration system leveraging &lt;a href=&quot;https://aws.amazon.com/ecs/&quot;&gt;Amazon EC2 Container Service&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We built Sundial to provide the following features on top of the standard ECS setup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Streaming Logs (to Cloudwatch and S3 and live in Sundial UI)&lt;/li&gt;
  &lt;li&gt;Metadata collection (through Graphite and displayed live in Sundial UI)&lt;/li&gt;
  &lt;li&gt;Dependency management between jobs&lt;/li&gt;
  &lt;li&gt;Retry strategies for failed jobs&lt;/li&gt;
  &lt;li&gt;Cron style scheduling for jobs&lt;/li&gt;
  &lt;li&gt;Email status reporting for jobs&lt;/li&gt;
  &lt;li&gt;Pagerduty integration for notifying team members about failing critical jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://i.imgur.com/RUZHLdI.png&quot; title=&quot;Sundial DAG&quot;&gt;Sundial DAG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other solutions available at the time didn’t suit our needs. Solutions we considered included &lt;a href=&quot;https://mesos.github.io/chronos/&quot;&gt;Chronos&lt;/a&gt; which lacked the features we needed and required a Mesos cluster, &lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;Spotify Luigi&lt;/a&gt; and &lt;a href=&quot;http://airbnb.io/projects/airflow/&quot;&gt;Airbnb Airflow&lt;/a&gt;, which was immature at the time.&lt;/p&gt;

&lt;p&gt;At the time, we chose ECS because we hoped to take advantages of AWS features such as autoscaling in order to save costs
 by scaling the cluster up and down by demand. In practice, this required too much manual effort and moving parts so we lived with a long running cluster
 scaled to handle peak load.&lt;/p&gt;

&lt;p&gt;Since then, our needs have grown and we have jobs ranging in size from a couple of hundred MB of memory to 60GB of memory. Having a cluster scaled
 to handle peak load with all these job sizes had become too expensive. Most job failure noise has been due to cluster resources not being available or smaller jobs taking up space on instances meant to be dedicated to bigger jobs. (ECS is weak when it comes to task placement strategies).&lt;/p&gt;

&lt;p&gt;Thankfully AWS have come along with their own enhancements on top of ECS in the form of &lt;a href=&quot;https://aws.amazon.com/batch/&quot;&gt;AWS Batch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-we-love-about-batch&quot;&gt;What we love about Batch&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Managed compute environment. This means AWS handles scaling up and down the cluster in response to workload.&lt;/li&gt;
  &lt;li&gt;Heterogenous instance types (useful when we have outlier jobs taking large amounts of CPU/memory resources)&lt;/li&gt;
  &lt;li&gt;Spot instances (save over half on on-demand instance costs)&lt;/li&gt;
  &lt;li&gt;Easy integration with Cloudwatch Logs (stdout and stderr captured automatically)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-sucks&quot;&gt;What sucks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Not being able to run “linked” containers (We relied on this for metadata service and log upload to S3)&lt;/li&gt;
  &lt;li&gt;Needing a custom AMI to configure extra disk space on the instances.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-wed-love-for-batch-to-do-better&quot;&gt;What we’d love for Batch to do better&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Make disk space on managed instances configurable.
   Currently the workaround is to create a custom AMI with the disk space you need if you have jobs that store a lot of data on disk (Not uncommon in a data processing environment). 
   Gilt has a feature request open with Amazon on this issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-not-dump-sundial-in-favour-of-using-batch-directly&quot;&gt;Why not dump Sundial in favour of using Batch directly?&lt;/h3&gt;

&lt;p&gt;Sundial still provides features that Batch doesn’t provide:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Email reporting&lt;/li&gt;
  &lt;li&gt;Pagerduty integration&lt;/li&gt;
  &lt;li&gt;Easy transition, processes can be a mixed workload of jobs running on ECS and Batch.&lt;/li&gt;
  &lt;li&gt;Configurable backoff strategy for job retries.&lt;/li&gt;
  &lt;li&gt;Time limits for jobs. If a job hangs, we can kill and retry after a certain period of time&lt;/li&gt;
  &lt;li&gt;Nice dashboard of processes (At a glance see what’s green and what’s red)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PAeqBJH.png&quot; alt=&quot;alt text&quot; title=&quot;Sundial dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, some of the above can be configured through hooking up lambdas/SNS messages etc. but Sundial gives it to you out of the box.&lt;/p&gt;

&lt;h3 id=&quot;what-next&quot;&gt;What next?&lt;/h3&gt;

&lt;p&gt;Sundial with AWS Batch backend now works great for the use cases we encounter doing personalization. We may consider enhancements such as Prometheus push gateway integration (to replace the Graphite service we had with ECS and to keep track of metrics over time) and UI enhancements to Sundial.&lt;/p&gt;

&lt;p&gt;In the long term we may consider other open source solutions as maintaining a job system counts as technical debt that
 is a distraction from product focused tasks. The HBC data team, who have very similar requirements to us, have started adopting Airflow (by Airbnb). As part of their adoption, they have contributed to an open source effort to make Airflow support Batch as a backend: &lt;a href=&quot;https://github.com/gilt/incubator-airflow/tree/aws_batch&quot;&gt;https://github.com/gilt/incubator-airflow/tree/aws_batch&lt;/a&gt;. If it works well, this is a solution we may adopt in the future.&lt;/p&gt;</content><author><name>Kevin O'Riordan</name></author><category term="batch" /><category term="aws" /><category term="tech" /><category term="personalization" /><summary>About a year ago, we (the Gilt/HBC personalization team) open sourced Sundial , a batch job orchestration system leveraging Amazon EC2 Container Service.</summary></entry><entry><title>Visually Similar Recommendations</title><link href="https://saksdirect.github.io/hbc-tech-blog/2017-07-31-tiefvision-2.html" rel="alternate" type="text/html" title="Visually Similar Recommendations" /><published>2017-07-31T00:00:00-05:00</published><updated>2017-07-31T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/tiefvision-2</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2017-07-31-tiefvision-2.html">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;Previously we’ve written about about &lt;a href=&quot;http://tech.gilt.com/machine/learning,/deep/learning/2016/12/22/deep-learning-at-gilt&quot;&gt;Tiefvision
&lt;/a&gt;,
a technical demo showcasing the ability to automatically find similar
dresses to a particular one of interest. For example:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: auto; width: 80%;&quot; src=&quot;/assets/images/tiefvision-2/example.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since then, we’ve worked on taking the ideas at play in Tiefvision, and
making them usable in a production scalable way, that allows us to
roll out to new product categories besides dresses quickly and
efficiently. Today, we’re excited to announce that we’ve rolled out
visually similar recommendations on Gilt for all dresses, t-shirts, and handbags,
as well as to women’s shoes, women’s denim, women’s pants, and men’s
outerwear.&lt;/p&gt;

&lt;p&gt;Let’s start with a brief overview. Consider the general task at
hand. We have a landing page for every product on our online
stores. For the Gilt store, we refer to this as the product detail
page (PDP). On the PDP we would like to offer the user a variety of
alternatives to the product they are looking at, so that they can
best make a purchasing decision. There exist a variety of approaches
to selecting other products to display as alternatives; a particularly
popular approach is called collaborative filtering which leverages
purchase history across users to make recommendations. However this
approach is what we call content-agnostic – it has no knowledge of
what a particular garment looks like. Instead, we’d like to look at the
photographs of garments and recommend similar looking garments within
the same category.&lt;/p&gt;

&lt;p&gt;Narrowing our focus a little bit, our task is to take a photograph of a
garment and find similar looking photographs. First, we need to come up
with some similarity measure for photographs, then we will need to be able
to quickly query for the most similar photographs from our large
catalog.&lt;/p&gt;

&lt;p&gt;This is something we need to do numerically. Recall that we can
represent a photograph as some tensor &lt;script type=&quot;math/tex&quot;&gt;P \in [0,1]^{H \times W \times 3}&lt;/script&gt; (in other words a three dimensional array with entries in between 0
and 1). Given that we have a numerical representation for an photograph, you
might think we could so something simple to the measure the similarity
between two photographs. Consider:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{sim} (P, P^\prime) =
\sqrt{\sum\limits_{h=0}^{H-1}\sum\limits_{w=0}^{W-1}\sum\limits_{c=0}^{2}
\left(P_{h,w,c} - P^\prime_{h,w,c}\right)^2}&lt;/script&gt;

&lt;p&gt;which we’d refer to as the Frobenius norm of the difference between the
two photographs. The problem with this, although it is simple, is that
we’re not measuring the difference between semantically meaningful
features. Consider these three dresses: a red floral print, pink stripes, and
a blue floral print.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: auto; width: 60%;&quot; src=&quot;/assets/images/tiefvision-2/pixel-space-example.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this “pixel-space” approach the red floral print and the pink stripes are
more likely to be recognized as similar than the red floral print and the
blue floral print, because they have pixels of similar colors at similar
locations. The “pixel-space” approach ignores locality and global
reasoning, and has no insight into semantic concepts.&lt;/p&gt;

&lt;p&gt;What we’d like to do is find some function &lt;script type=&quot;math/tex&quot;&gt;\phi(\cdot)&lt;/script&gt; that extracts
semantically meaningful features. We can then compute our similarity
metric in the feature-space rather than the pixel-space. Where do we
get this &lt;script type=&quot;math/tex&quot;&gt;\phi(\cdot)&lt;/script&gt;? In our case, we leverage deep neural networks
(deep learning) for this function. Neural networks are hierarchical
functions composed of typically sequential connections of simple
building blocks. This structure allows us take a neural network
trained for a specific task, like arbitrary object recognition and
pull from some intermediate point in the network. For example say we
take a network, trained to recognize objects in the ImageNet dataset,
composed of building blocks &lt;script type=&quot;math/tex&quot;&gt;f_1, f_2, \dots, f_M&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f\left(P\right) = f_M(f_{M-1}(\cdots f_2(f_1(P))\cdots)&lt;/script&gt;

&lt;p&gt;We might take the output of &lt;script type=&quot;math/tex&quot;&gt;f_3&lt;/script&gt; and call those our features:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\phi(P) = f_3(f_2(f_1(P)))&lt;/script&gt;

&lt;p&gt;In the case of convolutional networks like the VGG, Inception, or
Resnet families our output features would lie in some
vector space &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}^{H^\prime \times W^\prime \times C}&lt;/script&gt;. The
first two dimensions correspond to the original spatial dimensions (at
some reduced resolution) while the
third dimension corresponds to some set of &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; feature types. So in
other words, if one of our &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; feature types detects a human face,
we might see a high numerical value in spatial position near where a
person’s face is in the photograph. In our use cases, we’ve determined that
this spatial information isn’t nearly as important as the feature types
that we detect, so at this point we aggregate over the spatial
dimensions to get a vector in &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}^C&lt;/script&gt;. A simple way to do
this aggregation is with a simple arithmetic mean but other methods
work as well.&lt;/p&gt;

&lt;p&gt;From there we could build up some matrix &lt;script type=&quot;math/tex&quot;&gt;\Phi \in \mathbb{R}^{N
\times C}&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the number of items in a category of
interest. We could then construct an &lt;script type=&quot;math/tex&quot;&gt;N \times N&lt;/script&gt; similarity matrix
&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_{ij} = \sqrt{\sum\limits_{k=0}^{C-1} \left(\Phi_{ik} - \Phi_{jk}\right)^2}&lt;/script&gt;

&lt;p&gt;Then to find the most similar items to a query &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, we look at the
locations of the highest values in row &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; of the matrix.&lt;/p&gt;

&lt;p&gt;This approach is infeasible as &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; becomes large, as it has computational complexity
&lt;script type=&quot;math/tex&quot;&gt;O(N^2C)&lt;/script&gt; and space complexity &lt;script type=&quot;math/tex&quot;&gt;O(N^2)&lt;/script&gt;. To alleviate this issue,
we can leverage a variety of approximate nearest neighbor methods. We
empirically find that approximate neighbors are sufficient. Also
when we consider that our feature space represents some arbitrary
embedding with no guarantees of any particular notion of optimality,
it becomes clear there’s no grounded reason to warrant exact nearest
neighbor searches.&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-do-it&quot;&gt;How do we do it?&lt;/h2&gt;

&lt;p&gt;We leverage several open source technologies, as well as established
results from published research to serve visually similar garments. As
far as open source technology is concerned, we use
&lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;Tensorflow&lt;/a&gt;, and (our
very own) &lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;. Below you can
see a block diagram of our implementation:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: auto; width: 60%;&quot; src=&quot;/assets/images/tiefvision-2/block_diagram.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s walk through this process. First, we have a Sundial job that
accomplishes two tasks. We check for new products, and then we compute
embeddings using Tensorflow and a pretrained network of a particular type for
particular categories of products. We persist the embeddings on AWS
S3. Second, we have another Sundial job, again with two tasks. This job
filters the set of products to ones of some particular interest and
generates a nearest neighbors index for fast nearest neighbor look-ups. The job
completes, persisting the index on AWS S3. Finally, we wrap a
cluster of servers in a load balancer. Our product recommendation
service can query these nodes to get visually similar recommendations
as desired.&lt;/p&gt;

&lt;p&gt;Now, we can take a bit of a deeper dive into the thought process
behind some of the decisions we make as we roll out to new
categories. First, and perhaps the most important, is what network
type and where to tap it off so that we can compute embeddings. If we
recall that neural networks produce hierarchical representations, we
can deduce (and notice empirically) that deeper tap-points (more steps
removed from the input) produce embeddings that pick up on “higher
level” concepts rather than “low level” textures. So, for example, if
we wish to pick up on basic fabric textures we might pull from near
the input, and if we wish to pick up something higher level like
silhouette type we might pull from deeper in the network.&lt;/p&gt;

&lt;p&gt;The filtering step before we generate a index is also critically
important. At this point we can narrow down our products to only come
from one particular category, or even some further sub-categorization
to leverage the deep knowledge of fashion present at HBC.&lt;/p&gt;

&lt;p&gt;Finally, we must select the parameters for the index generation,
which control the error rate and performance trade-off in the approximate nearest
neighbors search. We can select these parameters empirically. We
utilize our knowledge of fashion, once again, to determine a good
operation point.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;We’ll be working to roll out to more and more categories, and even do
some cross category elements, perhaps completing outfits based on
their visual compatibility.&lt;/p&gt;</content><author><name>Chris Curro</name></author><category term="machine learning" /><category term="deep learning" /><category term="personalization" /><category term="recommendation" /><summary></summary></entry><entry><title>How Large Is YOUR Retrospective?</title><link href="https://saksdirect.github.io/hbc-tech-blog/2017-07-27-large-scale-retro.html" rel="alternate" type="text/html" title="How Large Is YOUR Retrospective?" /><published>2017-07-27T00:00:00-05:00</published><updated>2017-07-27T00:00:00-05:00</updated><id>https://saksdirect.github.io/hbc-tech-blog/large-scale-retro</id><content type="html" xml:base="https://saksdirect.github.io/hbc-tech-blog/2017-07-27-large-scale-retro.html">&lt;p&gt;Can you recall the size and length of your typical retrospective?
If your team operates by &lt;a href=&quot;http://www.scrumguides.org/docs/scrumguide/v2016/2016-Scrum-Guide-US.pdf&quot;&gt;The Scrum Guide&lt;/a&gt;, your retrospectives likely have less than ten people in one room and last about an hour for a two-weeks Sprint.&lt;/p&gt;

&lt;p&gt;What if your current team is larger than a typical Scrum team and a retrospective period is longer than a month? What if the team members are distributed across locations, countries, time zones and multiple third party vendors? Is this retrospective doomed to fail? Not quite.
These factors just add an additional complexity and call for a different facilitation approach.&lt;/p&gt;

&lt;p&gt;Last month at HBC we facilitated a large-scale mid-project retrospective for a 60 people-project team. While this project certainly didn’t start as an agile project, bringing in an agile retrospective practice helped identify significant improvements. 
Here is how we did it.&lt;/p&gt;

&lt;h1 id=&quot;from-inquiry-to-buy-in&quot;&gt;From Inquiry to Buy-in&lt;/h1&gt;

&lt;p&gt;This all started with one of the project sub-teams reaching out with an inquiry: “Can you facilitate a retrospective for us?”
That didn’t sound like anything major. We’ve been advocating for and facilitating retrospectives on various occasions at HBC: regular Sprint retrospectives, process retrospectives, new hire onboarding retrospectives etc.&lt;/p&gt;

&lt;p&gt;Further digging into a list of participants revealed that this retro would be unlike any others. We were about to pull together a group of 60 people from HBC and five consulting companies(!) In spite of working on the same project for a long time, these people never had a chance to step back and reflect on how they could work together differently.&lt;/p&gt;

&lt;p&gt;In order to make it successful, we needed buy-in from the leadership team to bring the entire team (including consultants) into the retrospective. Our first intent was to bring everyone into the same space (physical and virtual) and facilitate a retrospective with &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Space_Technology&quot;&gt;Open Space Technology&lt;/a&gt;.
Initial response wasn’t promising:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have another problem with this retro
[…] is concerned that it is all day and that the cost of doing this meeting is like $25K-$50K”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We had to go back and re-think the retrospective approach. How can we reduce the cost of this event without affecting the depth and breadth of the insights?&lt;/p&gt;

&lt;h1 id=&quot;options-we-considered&quot;&gt;Options we considered&lt;/h1&gt;

&lt;p&gt;Thanks to the well-documented large retrospectives experiments by other agile practitioners, there was a number of options to evaluate:&lt;/p&gt;

&lt;p&gt;1)	&lt;a href=&quot;http://joakimsunden.com/2013/01/running-big-retrospectives-at-spotify/&quot;&gt;Full project team, full day, face-to-face, Open Space-style retro&lt;/a&gt;
2)	&lt;a href=&quot;https://labs.spotify.com/2015/11/05/large-scale-retros/&quot;&gt;Decentralized, themes-based retros with learnings collected over a period of time and shared with the group&lt;/a&gt;
3)	&lt;a href=&quot;http://www.innovationgames.com/2014/06/how-to-run-huge-retrospectives/&quot;&gt;Decentralized retrospectives using Innovation Games Online platform&lt;/a&gt;
4)	&lt;a href=&quot;https://less.works/less/framework/overall-retrospective.html&quot;&gt;Overall retrospective (LeSS framework)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Around the same time, I was fortunate to join a Retrospective Facilitator’s Gathering (RFG2017) - an annual event that brought together the most experienced retrospective facilitators from around the World. Learning from their experience as well as brainstorming together on the possible format was really helpful. Thank you Tobias Baier, Allan Jepsen, Joanne Perold, George Dinwiddie and many others for sharing your insights! I was especially grateful for the in-depth conversation with Diana Larsen in which she pointed out to&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Clarify the goal and commitment of the key stakeholders before you start designing how to run the retrospective.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back to the drawing board again! More conversations, clarifications and convincing… 
With some modifications and adjustments, we finally were able to get the buy-in and moved forward with the retrospective.&lt;/p&gt;

&lt;h1 id=&quot;what-worked-for-us--a-tiered-format&quot;&gt;What worked for us – a tiered format.&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/35i1f82h.png&quot; alt=&quot;Tiered Retro&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;individual-team-level-retrospectives&quot;&gt;Individual team-level retrospectives&lt;/h2&gt;

&lt;p&gt;We had a mix of co-located and distributed sub-teams on this project and chose to enlist some help from multiple facilitators. To simplify data consolidation, each facilitator received a data gathering format along with a sample retrospective facilitation plan. Each individual sub-team was asked to identify two types of action items: ones that they felt were in their power to address and others that required a system-level thinking and the support from the larger project community. The former were selected by the sub-teams and put in motion by their respective owners. The latter were passed to the main facilitator for analysis and aggregation to serve as a starting point for the final retrospective.&lt;/p&gt;

&lt;h2 id=&quot;final-retrospective&quot;&gt;Final retrospective&lt;/h2&gt;

&lt;p&gt;For the final retrospective we brought together two types of participants:&lt;/p&gt;

&lt;p&gt;1) Leads and delegates from individual sub-teams who participated actively at all times.
2) Senior leaders of the organization who joined in the last hour to review and support team’s recommendations.&lt;/p&gt;

&lt;p&gt;The goal of this workshop was to review the ideas from sub-teams, explore system level improvements and get the support from senior leadership to put the system-level changes into motion.&lt;/p&gt;

&lt;h2 id=&quot;retrospective-plans&quot;&gt;Retrospective plans&lt;/h2&gt;

&lt;p&gt;Each retrospective was structured according to the &lt;a href=&quot;https://www.amazon.com/Agile-Retrospectives-Making-Teams-Great/dp/0977616649&quot;&gt;classic five-steps framework&lt;/a&gt; and included a number of activities selected from &lt;a href=&quot;https://plans-for-retrospectives.com/en/&quot;&gt;Retromat&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;example-of-an-in-room-sub-team-retrospective-1---15-hours&quot;&gt;Example of an in-room sub-team retrospective (1 - 1.5 hours)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Set the Stage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We used a happiness histogram to get things started and get a sense for how the people felt about the overall project.
&lt;img src=&quot;http://i.imgur.com/iJMp2W5m.jpg&quot; alt=&quot;Happiness Histogram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of reading the &lt;a href=&quot;http://www.retrospectives.com/pages/retroPrimeDirective.html&quot;&gt;Prime Directive&lt;/a&gt; once at the beginning with the team, we opted for displaying it in the room on a large poster as a visible reminder throughout the retrospective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gather Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everyone was instructed to think about the things they liked about the project (&lt;strong&gt;What worked well?&lt;/strong&gt;) and the ones that could’ve been better (&lt;strong&gt;What didn’t work so well?&lt;/strong&gt;). In a short time-boxed silent brainstorming each team member had to come up with at least two items in each category.&lt;/p&gt;

&lt;p&gt;Next we facilitated a pair-share activity in a “speed dating” format. Forming two lines, we asked participants to face each other and take turns discussing what each of them wrote on their post-its. After two minutes the partners were switched and the new pairs were formed to continue discussions with the new set of people.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/juJpgPwm.jpg&quot; alt=&quot;Pair Share&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the end of the timebox, we asked the last pairs to walk together to the four posters on the wall and place their post-its into respective categories: 
1) Worked Well/ Can’t control 
2) Worked Well/Can control
3) Didn’t work so well/Can’t control
4) Didn’t work so well/ Can control&lt;/p&gt;

&lt;p&gt;After performing an affinity mapping and a dot-voting the group selected top three issues that they felt were in their control to address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generate Insights/Decide What To Do&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every selected issue got picked up by a self-organized sub-group. Using a template each sub-group designed a team level experiment defining the action they propose to take, an observable behavior they expect to see after taking that action and the specific measurement that will confirm a success of the experiment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LhY2tFlm.jpg&quot; alt=&quot;Experiment&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Close the Retro&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We closed the retro by getting a feedback on the retro format, taking photos of the insights generated by the team.
These were passed on to the main facilitator for further analysis and preparation for the final retrospective event.&lt;/p&gt;

&lt;h3 id=&quot;modifications-for-distributed-teams&quot;&gt;Modifications for distributed teams&lt;/h3&gt;

&lt;p&gt;For those teams that had remote team members or were fully distributed, we used a &lt;a href=&quot;http://funretro.github.io/distributed/&quot;&gt;FunRetro&lt;/a&gt; tool. Flexibility to configure columns and the number of votes, along with easy user interface, fun colors and free cost made this tool a good substitute for an in-room retrospective.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/zg77ljGl.png&quot; alt=&quot;Fun Retro&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-retrospective-3-hours&quot;&gt;Final Retrospective (3 hours)&lt;/h2&gt;

&lt;p&gt;Once all individual sub-teams retrospective were completed, we consolidated the project-level improvement proposals. These insights were reviewed, analyzed for trends and systemic issues and then shared during Tier 2 Final Retrospective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set the stage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We used &lt;a href=&quot;https://www.storycubes.com&quot;&gt;story cubes&lt;/a&gt; to reflect and share how each of the participants felt about this project. This is a fun way to run a check in activity, equally effective with introverted and extraverted participants. The result is a collection of images that build a shared story about the project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/72rTEPTm.jpg&quot; alt=&quot;Story Cubes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also reviewed an aggregated happiness histogram from each individual sub-teams to learn about the mood of 60 people on this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gather data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since the retrospective period was very long, building a timeline together was really helpful in re-constructing the full view of the project. We asked participants to sort the events into the ones that had a positive impact on the project (placing them above the timeline) and the ones that had a negative impact on the project (placing them below the timeline). The insight we gained from this exercise alone were invaluable!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/qLQC7WIh.jpg&quot; alt=&quot;Timeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generate Insights&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next we paired the participants and asked them to walk to the consolidated recommendations posters. As a pair, they were tasked with selecting the most pressing issues and bringing them back for a follow up discussion at their table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/28Um9uFm.jpg&quot; alt=&quot;What Worked&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/tkxnjwWm.jpg&quot; alt=&quot;What Didn't&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each table used the &lt;a href=&quot;http://leancoffee.org&quot;&gt;LeanCoffee&lt;/a&gt; format to vote on the selected issues, prioritize them into a discussion backlog and explore as many of them as the timebox allowed. Participants used roman voting as a way to decide if they are ready to more on to the next topic or need more discussion about the current one. Closing each discussion, participants recorded their recommended action. At the end of the timebox all actions from each table were shared with the rest of the group to get feedback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/wylfBVom.jpg&quot; alt=&quot;LeanCoffee&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decide What To Do/Close&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the final hour of the retrospective the action owners shared their proposed next steps with the senior leadership team and reviewed the insights from the consolidated teams’ feedback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/AOKeQbVm.jpg&quot; alt=&quot;recommendations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Was this experiment successful? Absolutely! One of the biggest benefits of this retrospective was this collective experience of working across sub-teams and designing organizational improvements together.&lt;/p&gt;

&lt;p&gt;Could we have done it better? You bet! As the project continues, we will be looking to run the retrospectives more frequently and will take into account things we learnt in this experiment.&lt;/p&gt;

&lt;h1 id=&quot;what-did-we-learn&quot;&gt;What did we learn?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Designing a retrospective of this size is a project in itself. You need to be clear about the vision, the stakeholders and the success criteria for the retrospective.&lt;/li&gt;
  &lt;li&gt;Do your research, tap into the knowledge of agile community and get inspired by the experience of others. Take what you like and then adapt to make it work in the context of your organization.&lt;/li&gt;
  &lt;li&gt;Ask for help. Involve additional facilitators to get feedback, speed up the execution and created a safe space for individual sub-teams.&lt;/li&gt;
  &lt;li&gt;Inclusion trumps exclusion. Invite consultants as well as full-time employees into your retrospective to better understand the project dynamic.&lt;/li&gt;
  &lt;li&gt;Beware of potential confusion around retrospective practice. Be ready to explain the benefits and highlight the differences between a retrospective and a postmortem.&lt;/li&gt;
  &lt;li&gt;Bringing senior leaders into the last hour of final retrospective can negatively affect the dynamics of the discussions. Either work on prepping them better or plan on re-establishing the safe space after they join.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-would-we-like-to-do-next&quot;&gt;What would we like to do next?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Continue promoting the retrospective practice across the organization.&lt;/li&gt;
  &lt;li&gt;Offer a retrospective facilitator training to Scrum Masters, Agile Project Managers and anyone who is interested in learning how to run an effective retro.&lt;/li&gt;
  &lt;li&gt;Establish retrospective facilitator circle to help maintain and improve the practice for all teams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inspired by our experiment? Have your own experience worth sharing? We’d love to hear from you and learn what works in your environment. Blog about it and tweet your questions at @hbcdigital.&lt;/p&gt;

&lt;h1 id=&quot;world-retrospective-day&quot;&gt;World Retrospective Day&lt;/h1&gt;

&lt;p&gt;Whether you are a retrospective pro, have never tried one in the past or your experience is anywhere in between, please do yourself a favor and mark &lt;strong&gt;February 6, 2018&lt;/strong&gt; on your calendar. 
A group of experienced retrospective facilitators is currently planning a record-breaking World Retrospective Day with live local workshops on every continent and in every time zone along with many on-line learning opportunities. We are engaging with the industry thought leaders to make this one of the best and most engaging learning experience. We hope to see you there!&lt;/p&gt;</content><author><name>Dana Pylayeva</name></author><category term="agile" /><category term="retrospective" /><category term="scaling" /><summary>Can you recall the size and length of your typical retrospective?
If your team operates by The Scrum Guide, your retrospectives likely have less than ten people in one room and last about an hour for a two-weeks Sprint.</summary></entry></feed>
